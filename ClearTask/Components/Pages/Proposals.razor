@page "/proposals"
@using ClearTask.Components.Models
@using ClearTask.Components.Services
@inject IProposalService ProposalService
@inject NavigationManager NavManager

<PageTitle>Список заявок</PageTitle>

<h3 class="text-center">Список заявок</h3>

<button class="btn btn-primary mb-3" @onclick="OpenCreateForm">Создать заявку</button>

<table class="table">
    <thead>
        <tr>
            <th>№ заявки</th>
            <th>Автор заявки</th>
            <th>Подразделение автора</th>
            <th>Дата создания</th>
            <th>Статус</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var proposal in proposals ?? new List<Proposal>())
        {
            if (proposal != null)
            {
                <tr>
                    <td>@(proposal.FullNumber ?? "Не указан")</td>
                    <td>@(proposal.Author ?? "")</td>
                    <td>@(proposal.Division ?? "")</td>
                    <td>@(proposal.CreationDate.ToString("dd.MM.yyyy") ?? "")</td>
                    <td>@(proposal.TextStatus ?? "")</td>
                    <td>
                        @if (proposal.Status == ProposalStatus.Created)
                        {
                            <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmation(proposal)">Удалить</button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Форма создания -->
<Modal @bind-Visible="createFormIsOpened">
    <ModalHeader>
        Создание заявки
    </ModalHeader>
    <ModalBody>
        @if (newProposal != null) // Проверка на null
        {
            <EditForm Model="@newProposal" OnValidSubmit="CreateProposal">
                <DataAnnotationsValidator />
                <Blazorise.ValidationSummary />

                <Blazorise.TextEdit @bind-Value="newProposal.Author" Placeholder="Автор" Required />
                <Blazorise.TextEdit @bind-Value="newProposal.Division" Placeholder="Подразделение" Required />

                <button type="submit" class="btn btn-primary mt-3">Сохранить</button>
            </EditForm>
        }
        else
        {
            <p>Ошибка: newProposal не инициализирован</p>
        }
    </ModalBody>
    <ModalFooter>
        <button class="btn btn-secondary" @onclick="CloseCreateForm">Закрыть</button>
    </ModalFooter>
</Modal>

<!-- Модальное окно подтверждения удаления -->
<Modal @bind-Visible="deleteConfirmationIsOpened">
    <ModalBody>
        @if (selectedProposal != null)
        {
            <text>Вы уверены, что хотите удалить заявку №@selectedProposal.FullNumber?</text>
        }
        else
        {
            <text>Нет выбранной заявки</text>
        }
    </ModalBody>
    <ModalFooter>
        <button class="btn btn-danger" @onclick="ConfirmDelete" disabled="@(selectedProposal == null)">Да</button>
        <button class="btn btn-secondary" @onclick="CancelDelete">Нет</button>
    </ModalFooter>
</Modal>

@code {
    private List<Proposal> proposals = new List<Proposal>();
    private bool createFormIsOpened = false;
    private bool deleteConfirmationIsOpened = false;
    private Proposal selectedProposal = new(); // Инициализация
    private Proposal newProposal = new()
        {
            Author = string.Empty,
            Division = string.Empty,
            Status = ProposalStatus.Created
        };

    protected override async Task OnInitializedAsync()
    {
        proposals = await ProposalService.GetAllProposals() ?? new List<Proposal>();
    }

    private void OpenCreateForm()
    {
        newProposal = new Proposal
            {
                Author = string.Empty,
                Division = string.Empty,
                Status = ProposalStatus.Created
            };
        createFormIsOpened = true;
    }

    private async Task CreateProposal()
    {
        if (newProposal != null && !string.IsNullOrEmpty(newProposal.Author) && !string.IsNullOrEmpty(newProposal.Division))
        {
            await ProposalService.CreateProposal(newProposal);
            proposals = await ProposalService.GetAllProposals() ?? new List<Proposal>();
            NavManager.NavigateTo($"/proposals/{newProposal.Id}");
            createFormIsOpened = false;
        }
    }

    private void CloseCreateForm()
    {
        createFormIsOpened = false;

    }

    private void CancelDelete()
    {
        deleteConfirmationIsOpened = false;
    }

    private void OpenDeleteConfirmation(Proposal proposal)
    {
        if (proposal != null)
        {
            selectedProposal = proposal.Clone(); // Теперь работает
            deleteConfirmationIsOpened = true;
        }
    }

    private async Task ConfirmDelete()
    {
        if (selectedProposal != null)
        {
            await ProposalService.DeleteProposal(selectedProposal.Id);
            proposals = await ProposalService.GetAllProposals() ?? new List<Proposal>();
            deleteConfirmationIsOpened = false;
        }
    }
}